/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ie.philb.testorderingsoapclient.ui.nav.orders;

import ie.philb.testorderingsoapclient.Application;
import ie.philb.testorderingsoapclient.ApplicationListener;
import ie.philb.testorderingsoapclient.util.DateUtils;
import ie.philb.testorderingsoapclient.util.GridBagCellConstraints;
import ie.philb.testorderingsoapclient.ws.Order;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.GridBagLayout;
import java.awt.SystemColor;
import java.util.ArrayList;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListCellRenderer;
import javax.swing.ImageIcon;
import javax.swing.SwingConstants;
import javax.swing.border.Border;

/**
 *
 * @author philb
 */
public class OrdersListPanel extends javax.swing.JPanel {

    /**
     * Creates new form OrdersListPanel
     */
    public OrdersListPanel() {
        initComponents();
        jList1.setCellRenderer(new OrdersListCellRenderer());
        jList1.setModel(new OrdersListModel());

        Application.getApplication().addListener(new ApplicationListener() {

            @Override
            public void productsUpdated() {
                List<Order> orders = Application.getApplication().getOrders();

                if (orders != null) {
                    System.out.println("Should display " + orders.size() + " orders");
                    ((OrdersListModel) jList1.getModel()).setOrders(orders);
//                    jList1.setModel(new OrdersListModel(orders));
                }
            }

            @Override
            public void orderUpdated(Order oldOrder, Order newOrder) {
            }

            @Override
            public void categoryUpdated(OrderCategory node) {
                List<Order> orders = Application.getApplication().getOrders();

                if (orders != null) {
                    System.out.println("Should display " + orders.size() + " orders");
                    ((OrdersListModel) jList1.getModel()).setOrders(orders);
//                    jList1.setModel(new OrdersListModel(orders));
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();

        setFont(getFont().deriveFont(getFont().getStyle() | java.awt.Font.BOLD, getFont().getSize()+3));

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    class OrdersListModel extends DefaultListModel<Order> {

        private final List<Order> orders = new ArrayList<>();

        public OrdersListModel() {
        }

        public OrdersListModel(List<Order> orders) {
            this.orders.addAll(orders);
        }

        public void setOrders(List<Order> orders) {
            this.orders.clear();
            this.orders.addAll(orders);
            fireContentsChanged(orders, 0, orders.size());
        }

        @Override
        public int getSize() {
            System.out.println("Model has size " + orders.size());
            return orders.size();
        }

        @Override
        public Order getElementAt(int index) {
            return orders.get(index);
        }
    }

    class OrdersListCellRenderer implements ListCellRenderer<Order> {

        private final OrderListCell olc = new OrderListCell();

        //protected DefaultListCellRenderer defaultRenderer = new DefaultListCellRenderer();
        @Override
        public Component getListCellRendererComponent(JList<? extends Order> list, Order value, int index, boolean isSelected, boolean cellHasFocus) {
//            System.out.println("Will render order " + value);
//            JLabel renderer = (JLabel) defaultRenderer.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
//            renderer.setText("Order " + value.getId());
//            return renderer;
            olc.setOrder(value);
            olc.setSelected(isSelected);
            return olc;
        }

    }

    class OrderListCell extends JPanel {

        private final JLabel lblId = new JLabel();
        private final JLabel lblDate = new JLabel();
        private final JLabel lblStatus = new JLabel();
        private final Color borderColor = new Color(245, 245, 245);
        private final boolean isSelected = false;
        private Border selectedBorder = null;
        private Border unSelectedBorder = null;

        private final ImageIcon statusIcon = new ImageIcon(getClass().getResource("/ie/philb/testorderingsoapclient/icons/openorder.png"));

        private final Font headerFont = getFont().deriveFont(getFont().getStyle(), getFont().getSize() + 3);

        public OrderListCell() {

            //lblId.setFont(new Font());
            lblId.setFont(headerFont);
            lblStatus.setVerticalAlignment(SwingConstants.CENTER);
//            lblDate.setFont(new Font("Tahoma", 0, 12));

            setLayout(new GridBagLayout());
            setOpaque(true);
            setBackground(Color.white);

            Border insideBorder = BorderFactory.createMatteBorder(0, 0, 1, 0, borderColor);
            Border outsideBorder = BorderFactory.createEmptyBorder(1, 4, 1, 4);
            unSelectedBorder = BorderFactory.createCompoundBorder(outsideBorder, insideBorder);

            Border insideBorderSelected = BorderFactory.createMatteBorder(0, 0, 1, 0, SystemColor.textHighlight);
            selectedBorder = BorderFactory.createCompoundBorder(outsideBorder, insideBorderSelected);
            
            setBorder(unSelectedBorder);

            GridBagCellConstraints gbc = new GridBagCellConstraints(0, 0)
                    .weight(0.1)
                    .anchor(GridBagCellConstraints.NORTHWEST)
                    .fill(GridBagCellConstraints.VERTICAL)
                    .gridheight(2);

            add(lblStatus, gbc);

            gbc.height(1);
            gbc.anchor(GridBagCellConstraints.NORTH);
            gbc.fill(GridBagCellConstraints.BOTH);
            gbc.xy(1, 0);
            gbc.weight(1);

            add(lblId, gbc);

            gbc.xy(1, 1);
            add(lblDate, gbc);
        }

        public void setOrder(Order order) {
            lblDate.setText(DateUtils.formatDate(order.getCreated(), "d MMM yyyy HH:mm"));
            lblId.setText("Order " + order.getId());
            lblStatus.setIcon(statusIcon);
        }

        public void setSelected(boolean selected) {
            if (selected) {
                setBackground(SystemColor.textHighlight);
                lblId.setForeground(SystemColor.textHighlightText);
                lblDate.setForeground(SystemColor.textHighlightText);
                
                setBorder(selectedBorder);
            } else {
                setBackground(Color.white);
                lblId.setForeground(SystemColor.textText);
                lblDate.setForeground(SystemColor.textText);
                
                setBorder(unSelectedBorder);
            }
        }

        public boolean isSelected() {
            return isSelected;
        }
    }
}
