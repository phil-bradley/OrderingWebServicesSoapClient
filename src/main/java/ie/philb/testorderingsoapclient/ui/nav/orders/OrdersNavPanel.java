/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ie.philb.testorderingsoapclient.ui.nav.orders;

import ie.philb.testorderingsoapclient.Application;
import ie.philb.testorderingsoapclient.ApplicationListener;
import ie.philb.testorderingsoapclient.ws.Order;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 * @author philb
 */
public class OrdersNavPanel extends javax.swing.JPanel implements ApplicationListener {

    public OrdersNavPanel() {
        initComponents();
        jTree1.setModel(new OrdersTreeModel(Collections.EMPTY_LIST));
        jTree1.setCellRenderer(new OrdersTreeCellRenderer());
        jTree1.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);

        jTree1.addTreeSelectionListener((TreeSelectionEvent e) -> {
            Object selectedNode = jTree1.getLastSelectedPathComponent();
            
            if (selectedNode == null) {
                return;
            }
            
            if (selectedNode instanceof OrderCategory) {
                
            }
            
            if (selectedNode instanceof Order) {
                long selectedOrderId = ((Order) selectedNode).getId();
                System.out.println("Selected order " + selectedOrderId);
                
                Order selectedOrder = Application.getApplication().getOrder(selectedOrderId);
                Application.getApplication().setOrder(selectedOrder);
            }
        });

        Application.getApplication().addListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();

        jScrollPane1.setViewportView(jTree1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void orderUpdated(Order oldOrder, Order order) {

    }

    @Override
    public void productsUpdated() {

        List<Order> orders = Application.getApplication().getOrders();

        if (orders != null && !orders.isEmpty()) {
            OrderCategory outBoxCategory = new OrderCategory(1L, "Outbox");
            outBoxCategory.getOrders().addAll(orders);

            List<OrderCategory> categories = new ArrayList<>();
            categories.add(outBoxCategory);

            TreePath selectedTreePath = jTree1.getSelectionPath();
            jTree1.setModel(new OrdersTreeModel(categories));
            jTree1.setSelectionPath(selectedTreePath);

//            OrdersTreeModel otm = (OrdersTreeModel) jTree1.getModel();
//            otm.setOrderCategories(categories);
        }
    }
    
        
    @Override
    public void categoryUpdated(OrderCategory category) {
        
    }
}
